{"version":3,"file":"316.9aa0701f.iframe.bundle.js","mappings":"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","sources":["./node_modules/.pnpm/@angular+cdk@15.2.5_@angular+common@15.2.5_@angular+core@15.2.5_rxjs@6.6.7/node_modules/@angular/cdk/fesm2020/collections.mjs","./node_modules/.pnpm/@angular+material@15.2.5_@angular+animations@15.2.5_@angular+cdk@15.2.5_@angular+common@15.2._ilx6noj34uywwqivix57kj22rm/node_modules/@angular/material/fesm2020/menu.mjs"],"sourcesContent":["import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* _ViewRepeaterOperation.INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* _ViewRepeaterOperation.REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* _ViewRepeaterOperation.MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(value))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            for (let selectedValue of this._selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nUniqueSelectionDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator mdc-list-item\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mdc-list-item__primary-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator mdc-list-item',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mdc-list-item__primary-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, _defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\nclass MatMenu extends _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n        super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mdc-menu-surface mdc-menu-surface--open mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content mdc-list\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;position:relative}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item.mdc-list-item{align-items:center}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item .mdc-list-item__primary-text{white-space:normal}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mdc-menu-surface mdc-menu-surface--open mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content mdc-list\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;position:relative}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item.mdc-list-item{align-items:center}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item .mdc-list-item__primary-text{white-space:normal}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\nclass _MatMenuTriggerBase {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof _MatMenuBase) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }]; }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule], exports: [CdkScrollableModule,\n        MatMenu,\n        MatCommonModule,\n        MatMenuItem,\n        MatMenuContent,\n        MatMenuTrigger] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"names":["DataSource","isDataSource","value","connect","ConnectableObservable","ArrayDataSource","constructor","_data","super","this","isObservable","of","disconnect","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","viewArgsFactory","_insertView","_detachAndCacheView","_moveView","context","detach","destroy","cachedView","_insertViewFromCache","$implicit","viewArgs","createEmbeddedView","templateRef","index","detachedView","_maybeCacheView","get","move","length","push","indexOf","remove","pop","insert","SelectionModel","selected","_selected","Array","from","_selection","values","_multiple","initiallySelectedValues","_emitChanges","compareWith","Set","_deselectedToEmit","_selectedToEmit","changed","Subject","forEach","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","filter","has","toggle","isSelected","clear","flushEvent","_unmarkAll","_getConcreteValue","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","delete","ngDevMode","getMultipleValuesInSingleSelectionError","Error","inputValue","selectedValue","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","registered","ngOnDestroy","ɵfac","ɵprov","i0","type","Injectable","args","providedIn","_VIEW_REPEATER_STRATEGY","InjectionToken","_handleKeydown","closed","_onAnimationStart","_onAnimationDone","MAT_MENU_PANEL","_MatMenuItemBase","mixinDisableRipple","mixinDisabled","MatMenuItem","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","DOCUMENT","i1","ɵcmp","i2","i3","Component","selector","exportAs","inputs","host","changeDetection","ChangeDetectionStrategy","encapsulation","ViewEncapsulation","template","undefined","decorators","Inject","Optional","Input","MAT_MENU_CONTENT","_MatMenuContentBase","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","_portal","TemplatePortal","_outlet","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","ɵdir","Directive","MatMenuContent","provide","useExisting","providers","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","_MatMenuBase","_xPosition","throwMatMenuInvalidPositionX","setPositionClasses","_yPosition","throwMatMenuInvalidPositionY","_overlapTrigger","coerceBooleanProperty","hasBackdrop","_hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","split","className","_classList","classList","_ngZone","_defaultOptions","_directDescendantItems","QueryList","_panelAnimationState","_animationDone","overlayPanelClass","EventEmitter","close","panelId","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","_firstItemFocusSubscription","unsubscribe","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","onStable","take","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","notifyOnChanges","TemplateRef","ContentChildren","descendants","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","lazyContent","ContentChild","Output","MatMenu","changeDetectorRef","animations","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_MatMenuTriggerBase","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","_parentMaterialMenu","throwMatMenuRecursiveError","reason","_destroyMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","_hoverSubscription","inject","ChangeDetectorRef","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","i1$1","i3$1","Self","MatMenuTrigger","MatMenuModule","ɵmod","CommonModule","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule","ɵinj","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}
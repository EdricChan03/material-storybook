{"version":3,"file":"366.e7820c7e.iframe.bundle.js","mappings":"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","sources":["./node_modules/.pnpm/@angular+common@15.2.5_@angular+core@15.2.5_rxjs@6.6.7/node_modules/@angular/common/fesm2020/http.mjs","./node_modules/.pnpm/@angular+material@15.2.5_@angular+animations@15.2.5_@angular+cdk@15.2.5_@angular+common@15.2._ilx6noj34uywwqivix57kj22rm/node_modules/@angular/material/fesm2020/icon.mjs"],"sourcesContent":["/**\n * @license Angular v15.2.5\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (typeof value !== 'string' && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClient });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        return chain(req, handler);\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n    }\n}\nHttpInterceptorHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpInterceptorHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpInterceptorHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpClientBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpClientBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nJsonpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXhrBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXhrBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientXsrfModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        }).ɵproviders,\n        { provide: XSRF_ENABLED, useValue: true },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientModule });\nHttpClientModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientModule, providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientJsonpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        withJsonpSupport().ɵproviders,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.5\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler };\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"names":["HttpHandler","HttpBackend","HttpHeaders","constructor","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","assertValidHeaders","Object","entries","Array","isArray","Error","keys","values","length","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","replace","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","map","paramParser","rawParams","codec","param","eqIdx","val","list","res","appendAll","params","_value","toString","eKey","join","idx","splice","HttpContext","token","defaultValue","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","context","urlWithParams","qIdx","sep","serializeBody","isUrlSearchParams","URLSearchParams","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","super","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","ɵfac","i0","ɵprov","Injectable","HTTP_INTERCEPTORS","InjectionToken","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","inject","optional","reduceRight","HttpInterceptorHandler","backend","injector","dedupedInterceptorFns","Set","nextSequencedFn","interceptorFn","chainedInterceptorFn","runInContext","foreignDocument","nextRequestId","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","Observable","observer","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","addEventListener","then","next","complete","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","jsonpInterceptorFn","DOCUMENT","decorators","Inject","args","JsonpInterceptor","XSSI_PREFIX","HttpXhrBackend","xhrFactory","xhr","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","onLoad","response","responseText","originalBody","parse","text","onError","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","i1","XSRF_ENABLED","XSRF_COOKIE_NAME","providedIn","factory","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","xsrfInterceptorFn","lcUrl","startsWith","headerName","PLATFORM_ID","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","makeEnvironmentProviders","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withJsonpSupport","JsonpSupport","HttpClientXsrfModule","static","ngModule","ɵmod","ɵinj","NgModule","HttpClientModule","HttpClientJsonpModule","policy","trustedHTMLFromString","html","getPolicy","ttWindow","trustedTypes","createPolicy","createHTML","getMatIconNameNotFoundError","iconName","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","handleError","forkJoin","foundIcon","i","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","_setSvgAttributes","_toSvgElement","_svgElementFromString","str","div","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","getMatIconNoHttpProviderError","inProgressFetch","finalize","share","configNamespace","svgElement","result","i2","Optional","SkipSelf","DomSanitizer","ErrorHandler","_MatIconBase","mixinColor","_elementRef","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","inline","_inline","coerceBooleanProperty","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","_previousFontSetClass","_currentIconFetch","Subscription","color","defaultColor","nativeElement","_splitIconName","parts","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","classList","add","_previousFontIconClass","includes","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","take","subscribe","ɵcmp","Component","template","selector","exportAs","inputs","host","encapsulation","ViewEncapsulation","changeDetection","ChangeDetectionStrategy","styles","Attribute","Input","MatIconModule","MatCommonModule","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}
{"version":3,"file":"529.9755fd33.iframe.bundle.js","mappings":"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","sources":["./node_modules/.pnpm/@angular+cdk@15.2.5_@angular+common@15.2.5_@angular+core@15.2.5_rxjs@6.6.7/node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/.pnpm/@angular+cdk@15.2.5_@angular+common@15.2.5_@angular+core@15.2.5_rxjs@6.6.7/node_modules/@angular/cdk/fesm2020/portal.mjs","./node_modules/.pnpm/@angular+cdk@15.2.5_@angular+common@15.2.5_@angular+core@15.2.5_rxjs@6.6.7/node_modules/@angular/cdk/fesm2020/scrolling.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, take, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n}\nCdkVirtualScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n}\nCdkVirtualScrollableElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n}\nCdkVirtualScrollableWindow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableWindow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n        CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n        CdkScrollableModule,\n        CdkVirtualScrollViewport, BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"],"names":["scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","constructor","_viewportRuler","document","this","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","pipe","filter","scrollable","overlayElement","getElementRef","nativeElement","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","i0","i1","DOCUMENT","ɵprov","type","Injectable","args","providedIn","undefined","decorators","Inject","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","OverlayKeyboardDispatcher","super","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","next","_isAttached","runOutsideAngular","addEventListener","removeEventListener","Optional","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","origin","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","appendChild","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","cssUnitPattern","FlexibleConnectedPositionStrategy","positions","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","ElementRef","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","Directive","exportAs","standalone","CdkConnectedOverlay","_position","_updatePositionStrategy","_hasBackdrop","coerceBooleanProperty","lockPosition","_lockPosition","_flexibleDimensions","_push","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","takeWhile","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","ɵmod","BidiModule","PortalModule","ScrollingModule","ɵinj","NgModule","imports","exports","providers","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","throwPortalAlreadyAttachedError","Portal","throwNullPortalOutletError","_attachedHost","throwNoPortalAttachedError","setAttachedHost","ComponentPortal","component","injector","componentFactoryResolver","projectableNodes","context","DomPortal","BasePortalOutlet","attachDomPortal","_attachedPortal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","setDisposeFn","_disposeFn","outletElement","_defaultInjector","anchorNode","createComment","replaceChild","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","destroy","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","CdkPortal","TemplatePortalDirective","useExisting","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ngOnInit","ref","clear","nodeType","ELEMENT_NODE","inputs","PortalHostDirective","declarations","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","_updateTotalContentSize","_updateRenderedRange","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","viewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","CdkFixedSizeVirtualScroll","coerceNumberProperty","forwardRef","ScrollDispatcher","_scrolled","_globalSubscription","_scrolledCount","Map","register","has","set","elementScrolled","deregister","scrollableReference","delete","auditTimeInMs","Observable","observer","_addGlobalListener","auditTime","_removeGlobalListener","of","_","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","coerceElement","scrollableElement","fromEvent","CdkScrollable","scrollDispatcher","ngZone","_destroyed","_elementScrolled","scrollTo","options","el","getRtlScrollAxisType","_applyScrollToOptions","scrollTop","scrollLeft","from","i2","ViewportRuler","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","orientation","viewportEl","SCROLL_SCHEDULER","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_orientation","_calculateSpacerSize","appendOnly","_appendOnly","_changeDetectorRef","viewportRuler","inject","Platform","_detachedSubject","_renderedRangeSubject","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","_doChangeDetection","measureBoundingClientRectWithScrollOffset","size","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","to","isHorizontal","Number","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","fromRect","scrollerClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","markForCheck","runAfterChangeDetection","getOffset","node","rect","ɵcmp","virtualScrollable","Component","encapsulation","ViewEncapsulation","changeDetection","ChangeDetectionStrategy","template","ViewChild","static","CdkVirtualForOf","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","_dataSourceChanges","ArrayDataSource","isObservable","Array","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","_needsUpdate","item","cdkVirtualForTemplate","_template","cdkVirtualForTemplateCacheSize","_viewRepeater","viewCacheSize","_differs","viewChange","pairwise","switchMap","prev","cur","_changeDataSource","shareReplay","_differ","_data","_onRenderedDataChange","renderedStartIndex","rangeLen","firstNode","lastNode","view","ngDoCheck","diff","_renderedItems","_applyChanges","_updateContext","find","oldDs","newDs","disconnect","connect","count","_updateComputedContextProperties","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","first","last","even","odd","_VIEW_REPEATER_STRATEGY","useClass","_RecycleViewRepeaterStrategy","i2$1","SkipSelf","CdkVirtualScrollableElement","CdkVirtualScrollableWindow","CdkScrollableModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2]}
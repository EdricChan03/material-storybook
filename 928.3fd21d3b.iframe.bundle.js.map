{"version":3,"file":"928.3fd21d3b.iframe.bundle.js","mappings":"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","sources":["./node_modules/.pnpm/@angular+material@15.2.5_@angular+animations@15.2.5_@angular+cdk@15.2.5_@angular+common@15.2._ilx6noj34uywwqivix57kj22rm/node_modules/@angular/material/fesm2020/button-toggle.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The button toggle that emits the event. */\n    source, \n    /** The value assigned to the button toggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._markButtonsForCheck();\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._markButtonsForCheck();\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markButtonsForCheck();\n    }\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(toggle) {\n        const event = new MatButtonToggleChange(toggle, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n        }\n        else {\n            this._updateModelValue(toggle, isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(toggle, isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent(toggle);\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /** Marks all of the child button toggles to be checked. */\n    _markButtonsForCheck() {\n        this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n    }\n}\nMatButtonToggleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatButtonToggleGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n    ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector() ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Gets the name that should be assigned to the inner DOM node. */\n    _getButtonName() {\n        if (this._isSingleSelector()) {\n            return this.buttonToggleGroup.name;\n        }\n        return this.name || null;\n    }\n    /** Whether the toggle is in single selection mode. */\n    _isSingleSelector() {\n        return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    }\n}\nMatButtonToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButtonToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\n        }], ctorParameters: function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] });\nMatButtonToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, imports: [MatCommonModule, MatRippleModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n"],"names":["MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","this","name","_name","_markButtonsForCheck","vertical","_vertical","coerceBooleanProperty","selected","_selectionModel","multiple","map","toggle","undefined","newValue","_setSelectionByValue","valueChange","emit","_multiple","disabled","_disabled","_changeDetector","defaultOptions","_controlValueAccessorChangeFn","_onTouched","EventEmitter","change","appearance","ngOnInit","SelectionModel","ngAfterContentInit","select","_buttonToggles","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","Array","isArray","some","ngDevMode","Error","_clearSelection","forEach","currentValue","_selectValue","clear","correspondingOption","find","_markForCheck","ɵfac","i0","ɵdir","MatButtonToggle","type","Directive","args","selector","providers","host","exportAs","decorators","Optional","Inject","ContentChildren","descendants","Input","Output","_MatButtonToggleBase","mixinDisableRipple","buttonId","id","buttonToggleGroup","_appearance","_checked","_changeDetectorRef","toggleGroup","_elementRef","_focusMonitor","defaultTabIndex","super","ariaLabelledby","parsedTabIndex","Number","tabIndex","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","_isSingleSelector","_getButtonName","i1","ɵcmp","i2","Component","encapsulation","ViewEncapsulation","changeDetection","ChangeDetectionStrategy","inputs","template","styles","Attribute","ariaLabel","ViewChild","MatButtonToggleModule","ɵmod","MatCommonModule","MatRippleModule","ɵinj","NgModule","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}